// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("PRISMA_DATABASE_URL")
}

model AdminLog {
  id          String    @id @default(uuid())
  tableName   String
  action      String
  description String
  admin       Admin     @relation(fields: [adminID], references: [id])
  adminID     String
  createdAt   DateTime? @default(now()) @db.Timestamp()
  updatedAt   DateTime  @updatedAt
}

model Admin {
  id             String       @id @default(uuid())
  username       String
  email          String
  password       String
  blocked        String
  picture        String
  org_id         Organization @relation(fields: [OrganizationId], references: [id])
  OrganizationId String
  createdAt      DateTime?    @default(now()) @db.Timestamp()
  updatedAt      DateTime     @updatedAt
  AdminLog       AdminLog[]
  Permission     Permission[]
}

model AllContent {
  id             String         @id @default(uuid())
  name           String
  description    String
  content        String
  type           String
  points         Int
  org_id         Organization   @relation(fields: [OrganizationId], references: [id])
  OrganizationId String
  createdAt      DateTime?      @default(now()) @db.Timestamp()
  updatedAt      DateTime       @updatedAt
  SkillSection   SkillSection[]
  Quiz           Quiz[]
}

model AmountRequest {
  id         String    @id @default(uuid())
  amount     Int
  user       User      @relation(fields: [userID], references: [id])
  userID     String
  isApproved Boolean   @default(false)
  isReviewed Boolean   @default(false)
  createdAt  DateTime? @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt
}

model AnalyticsSetting {
  id               String       @id @default(uuid())
  org_id           Organization @relation(fields: [OrganizationId], references: [id])
  OrganizationId   String
  assessmentForm   Form         @relation(fields: [assessmentFormId], references: [id])
  assessmentFormId String
  createdAt        DateTime?    @default(now()) @db.Timestamp()
  updatedAt        DateTime     @updatedAt
}

model Badge {
  id             String        @id @default(uuid())
  name           String
  description    String
  icon_id        Icon          @relation(fields: [iconID], references: [id])
  iconID         String
  org_id         Organization  @relation(fields: [OrganizationId], references: [id])
  OrganizationId String
  createdAt      DateTime?     @default(now()) @db.Timestamp()
  updatedAt      DateTime      @updatedAt
  LessonBadge    LessonBadge[]
}

model BudgetingCalculator {
  id           String    @id @default(uuid())
  name         String
  amount       Int
  mainCategory String
  subCategory  String
  type         String
  description  String
  isRecurring  Boolean
  frequency    String
  user         User      @relation(fields: [userID], references: [id])
  userID       String
  createdAt    DateTime? @default(now()) @db.Timestamp()
  updatedAt    DateTime  @updatedAt
}

model BusinessCheckingAccount {
  id                      String    @id @default(uuid())
  product                 String
  reviews                 String
  atm_fee                 String
  monthaly_fee            String
  minimum_balance         String
  annual_percentage_yield String
  product_website         String
  createdAt               DateTime? @default(now()) @db.Timestamp()
  updatedAt               DateTime  @updatedAt
}

model Category {
  id String @id @default(uuid())
}

model ChatBot {
  id             String       @id @default(uuid())
  name           String
  description    String
  points         Int
  content        String
  org_id         Organization @relation(fields: [OrganizationId], references: [id])
  OrganizationId String
  createdAt      DateTime?    @default(now()) @db.Timestamp()
  updatedAt      DateTime     @updatedAt
  SubSkill       SubSkill[]
}

model CreditCard {
  id                 String               @id @default(uuid())
  cardNumber         String
  cvv                Int
  expiryDate         DateTime
  isBlocked          Boolean              @default(false)
  tempFreeze         Boolean              @default(false)
  currentAmount      String               @default("500")
  user               User                 @relation(fields: [userID], references: [id])
  userID             String
  createdAt          DateTime?            @default(now()) @db.Timestamp()
  updatedAt          DateTime             @updatedAt
  GroceryGameOrder   GroceryGameOrder[]
  TransactionHistory TransactionHistory[]
}

model Enrollment {
  id          String         @id @default(uuid())
  isCompleted Boolean
  rating      Int
  quizPoints  Int            @default(0)
  word        WordsGlossary? @relation(fields: [wordID], references: [id])
  wordID      String?
  user        User           @relation(fields: [userID], references: [id])
  userID      String
  lesson      Lesson?        @relation(fields: [lessonID], references: [id])
  lessonID    String?
  module      Module?        @relation(fields: [moduleID], references: [id])
  moduleID    String?
  skill       Skill?         @relation(fields: [skillID], references: [id])
  skillID     String?
  subSkill    SubSkill?      @relation(fields: [subSkillID], references: [id])
  subSkillID  String?
  createdAt   DateTime?      @default(now()) @db.Timestamp()
  updatedAt   DateTime       @updatedAt
}

enum FinancialGoal_Status {
  backlog
  todo
  progress
  done
  trash
}

enum FinancialGoal_Type {
  midterm
  longterm
  shortterm
}

model FinancialGoal {
  id           String               @id @default(uuid())
  description  String
  name         String
  user         User                 @relation(fields: [userID], references: [id])
  userID       String
  status       FinancialGoal_Status @default(todo)
  type         FinancialGoal_Type
  created_id   String               @default(uuid())
  completed_id String?
  isDeleted    Boolean              @default(false)
  start_date   DateTime?            @default(now())
  end_date     DateTime?
  createdAt    DateTime?            @default(now()) @db.Timestamp()
  updatedAt    DateTime             @updatedAt
}

// model FormAnalytics {
//   id String @id @default(uuid())
// }

model Form {
  id               String             @id @default(uuid())
  description      String
  image            String
  stared           Boolean            @default(false)
  formType         String             @default("anonymous")
  org_id           Organization       @relation(fields: [OrganizationId], references: [id])
  OrganizationId   String
  createdAt        DateTime?          @default(now()) @db.Timestamp()
  updatedAt        DateTime           @updatedAt
  AnalyticsSetting AnalyticsSetting[]
  Sections         Sections[]
  Response         Response[]
}

//  attched with form
model Sections {
  id        String    @id @default(uuid())
  name      String
  form      Form      @relation(fields: [formID], references: [id])
  formID    String
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt
}

//  attched with form
model Questions {
  id            String    @id @default(uuid())
  open          Boolean   @default(false)
  questionText  String
  questionImage String?
  trueValue     Int       @default(0)
  freeText      String?
  isFreeText    Boolean   @default(false)
  section       String?
  createdAt     DateTime? @default(now()) @db.Timestamp()
  updatedAt     DateTime  @updatedAt
  Options       Options[]
}

//  attched with Questions
model Options {
  id          String    @id @default(uuid())
  optionText  String
  optionImage String?
  question    Questions @relation(fields: [questionID], references: [id])
  questionID  String
  createdAt   DateTime? @default(now()) @db.Timestamp()
  updatedAt   DateTime  @updatedAt
}

model Aisle {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime?   @default(now()) @db.Timestamp()
  updatedAt DateTime    @updatedAt
  GameItems GameItems[]
}

model GameBudget {
  id        String    @id @default(uuid())
  amount    Int
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt
}

model GameItems {
  id             String       @id @default(uuid())
  name           String
  price          Int
  credits        Int
  onSale         Boolean
  coupon         Int
  salePercentage Int
  onShoppingList Boolean
  picture        String
  aisle          Aisle        @relation(fields: [AisleId], references: [id])
  AisleId        String
  createdAt      DateTime?    @default(now()) @db.Timestamp()
  updatedAt      DateTime     @updatedAt
  Orderitems     Orderitems[]
}

model GroceryGameOrder {
  id           String     @id @default(uuid())
  payment_type String     @default("card")
  cardnumber   String
  totalPrice   String
  card         CreditCard @relation(fields: [cardID], references: [id])
  cardID       String
  createdAt    DateTime?  @default(now()) @db.Timestamp()
  updatedAt    DateTime   @updatedAt
}

model Orderitems {
  id        String    @id @default(uuid())
  qty       String
  item      GameItems @relation(fields: [itemId], references: [id])
  itemId    String
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt
}

model GroceryGameStock {
  id         String    @id @default(uuid())
  shareName  String
  sharePrice Int
  createdAt  DateTime? @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt
}

model GameTips {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt
}

model JobSkillDetails {
  id          String     @id @default(uuid())
  description String
  name        String
  createdAt   DateTime?  @default(now()) @db.Timestamp()
  updatedAt   DateTime   @updatedAt
  JobSkill    JobSkill[]
}

model JobSkill {
  id         String          @id @default(uuid())
  detail     JobSkillDetails @relation(fields: [detailID], references: [id])
  detailID   String
  job        JobTitle        @relation(fields: [jobTitleID], references: [id])
  jobTitleID String
  createdAt  DateTime?       @default(now()) @db.Timestamp()
  updatedAt  DateTime        @updatedAt
}

model JobTitle {
  id             String           @id @default(uuid())
  description    String
  name           String
  createdAt      DateTime?        @default(now()) @db.Timestamp()
  updatedAt      DateTime         @updatedAt
  JobSkill       JobSkill[]
  JobTitleSkills JobTitleSkills[]
}

model JobTitleSkills {
  id         String    @id @default(uuid())
  name       String
  job        JobTitle  @relation(fields: [jobTitleID], references: [id])
  jobTitleID String
  createdAt  DateTime? @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt
}

enum journal {
  notes
  question
}

model Journal {
  id         String    @id @default(uuid())
  type       journal
  title      String?
  content    String?
  question   String?
  answer     String?
  teacher    String?
  isAnswered Boolean   @default(false)
  attachment String?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime? @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt
}

model Permission {
  id        String    @id @default(uuid())
  tableName String
  mode      String
  admin     Admin     @relation(fields: [adminID], references: [id])
  adminID   String
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt
}

enum podcastSubmission {
  notsubmitted
  submitted
  resubmitted
}

enum podcastApproval {
  pending
  approved
  notapproved
}

model Podcast {
  id             String            @id @default(uuid())
  title          String
  description    String
  totalPoints    Int
  obtainedPoints Int               @default(0)
  submission     podcastSubmission @default(notsubmitted)
  approval       podcastApproval   @default(pending)
  submittedFile  String?
  podcastImage   String?
  user           User              @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime?         @default(now()) @db.Timestamp()
  updatedAt      DateTime          @updatedAt
}

model Quiz {
  id             String       @id @default(uuid())
  question       String
  answer01       String
  answer02       String
  answer03       String
  answer04       String
  trueOption     Int
  points         Int
  icon           Icon         @relation(fields: [iconID], references: [id])
  iconID         String
  subskill       SubSkill     @relation(fields: [subSkillID], references: [id])
  subSkillID     String
  allcontent     AllContent   @relation(fields: [allContentID], references: [id])
  allContentID   String
  org_id         Organization @relation(fields: [OrganizationId], references: [id])
  OrganizationId String
  createdAt      DateTime?    @default(now()) @db.Timestamp()
  updatedAt      DateTime     @updatedAt
}

model Response {
  id            String          @id @default(uuid())
  form          Form            @relation(fields: [formId], references: [id])
  formId        String
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime?       @default(now()) @db.Timestamp()
  updatedAt     DateTime        @updatedAt
  QuizResponses QuizResponses[]
}

model QuizResponses {
  id         String    @id @default(uuid())
  questionId String
  optionId   String
  freeText   String
  response   Response  @relation(fields: [responseId], references: [id])
  responseId String
  createdAt  DateTime? @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt
}

model StickBallProperties {
  id String @id @default(uuid())
}

enum transactiontype {
  credit
  debit
}

model TransactionHistory {
  id              String          @id @default(uuid())
  transactionType transactiontype
  amount          Int
  description     String
  card            CreditCard      @relation(fields: [cardID], references: [id])
  cardID          String
  createdAt       DateTime?       @default(now()) @db.Timestamp()
  updatedAt       DateTime        @updatedAt
}

model UserLog {
  id         String    @id @default(uuid())
  pageName   String
  buttonName String
  user       User      @relation(fields: [userID], references: [id])
  userID     String
  createdAt  DateTime? @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt
}

model User {
  id                         String                @id @default(uuid())
  email                      String                @unique
  dob                        String
  phoneNumber                String
  zipCode                    String
  password                   String
  firstName                  String
  lastName                   String
  organization               String?
  resetPasswordToken         String?
  confirmationToken          String?
  confirmed                  Boolean?              @default(false)
  blocked                    Boolean?              @default(false)
  photo                      String
  code                       String?
  isClever                   Boolean?              @default(false)
  cleverID                   String?
  districtID                 String?
  class                      String?
  teacher                    String?
  org_id                     Organization          @relation(fields: [OrganizationId], references: [id])
  OrganizationId             String
  create_transaction_details Boolean?              @default(true)
  createdAt                  DateTime?             @default(now()) @db.Timestamp()
  updatedAt                  DateTime              @updatedAt
  AmountRequest              AmountRequest[]
  BudgetingCalculator        BudgetingCalculator[]
  CreditCard                 CreditCard[]
  Enrollment                 Enrollment[]
  FinancialGoal              FinancialGoal[]
  Journal                    Journal[]
  Podcast                    Podcast[]
  Response                   Response[]
  UserLog                    UserLog[]
}

model Icon {
  id             String       @id @default(uuid())
  name           String
  svg            String
  org_id         Organization @relation(fields: [OrganizationId], references: [id])
  OrganizationId String
  createdAt      DateTime?    @default(now()) @db.Timestamp()
  updatedAt      DateTime     @updatedAt
  module         Module[]
  Lesson         Lesson[]
  SubSkill       SubSkill[]
  Badge          Badge[]
  Quiz           Quiz[]
}

model Lesson {
  id                  String                @id @default(uuid())
  name                String
  description         String
  priorityIndex       Int
  status              String
  module_id           Module                @relation(fields: [moduleID], references: [id])
  moduleID            String
  icon_id             Icon                  @relation(fields: [iconID], references: [id])
  iconID              String
  createdAt           DateTime?             @default(now()) @db.Timestamp()
  updatedAt           DateTime              @updatedAt
  Skill               Skill[]
  LessonBadge         LessonBadge[]
  LessonWordsGlossary LessonWordsGlossary[]
  Enrollment          Enrollment[]
}

model LessonBadge {
  id        String    @id @default(uuid())
  badge_id  Badge     @relation(fields: [badgeID], references: [id])
  badgeID   String
  lesson_id Lesson    @relation(fields: [lessonID], references: [id])
  lessonID  String
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt
}

model LessonWordsGlossary {
  id              String        @id @default(uuid())
  lesson_id       Lesson        @relation(fields: [lessonID], references: [id])
  lessonID        String
  word_id         WordsGlossary @relation(fields: [wordsGlossaryID], references: [id])
  wordsGlossaryID String
  createdAt       DateTime?     @default(now()) @db.Timestamp()
  updatedAt       DateTime      @updatedAt
}

model Module {
  id             String       @id @default(uuid())
  name           String
  priorityIndex  Int
  status         String
  icon_id        Icon         @relation(fields: [iconID], references: [id])
  iconID         String
  org_id         Organization @relation(fields: [OrganizationId], references: [id])
  OrganizationId String
  createdAt      DateTime?    @default(now()) @db.Timestamp()
  updatedAt      DateTime     @updatedAt
  Lesson         Lesson[]
  Enrollment     Enrollment[]
}

model Organization {
  id               String             @id @default(uuid())
  name             String             @unique
  createdAt        DateTime?          @default(now()) @db.Timestamp()
  updatedAt        DateTime           @updatedAt
  User             User[]
  Icon             Icon[]
  module           Module[]
  ChatBot          ChatBot[]
  AllContent       AllContent[]
  Admin            Admin[]
  Badge            Badge[]
  WordsGlossary    WordsGlossary[]
  SkillAssignment  SkillAssignment[]
  AnalyticsSetting AnalyticsSetting[]
  Form             Form[]
  Quiz             Quiz[]
}

model Order {
  id String @id @default(uuid())
}

model Product {
  id String @id @default(uuid())
}

model Skill {
  id            String       @id @default(uuid())
  name          String
  priorityIndex Int
  status        String
  lesson_id     Lesson       @relation(fields: [lessonID], references: [id])
  lessonID      String
  createdAt     DateTime?    @default(now()) @db.Timestamp()
  updatedAt     DateTime     @updatedAt
  SubSkill      SubSkill[]
  Enrollment    Enrollment[]
}

model SkillAssignment {
  id              String       @id @default(uuid())
  applicationName String
  partName        String
  assignmentName  String
  org_id          Organization @relation(fields: [OrganizationId], references: [id])
  OrganizationId  String
  createdAt       DateTime?    @default(now()) @db.Timestamp()
  updatedAt       DateTime     @updatedAt
}

model SubSkill {
  id            String         @id @default(uuid())
  name          String
  description   String
  priorityIndex Int
  status        String
  chatbot_id    ChatBot        @relation(fields: [chatBotID], references: [id])
  chatBotID     String
  skill_id      Skill          @relation(fields: [skillID], references: [id])
  skillID       String
  icon_id       Icon           @relation(fields: [iconID], references: [id])
  iconID        String
  createdAt     DateTime?      @default(now()) @db.Timestamp()
  updatedAt     DateTime       @updatedAt
  SkillSection  SkillSection[]
  Enrollment    Enrollment[]
  Quiz          Quiz[]
}

model SkillSection {
  id            String     @id @default(uuid())
  name          String
  priorityIndex Int
  sub_skill_id  SubSkill   @relation(fields: [subSkillID], references: [id])
  subSkillID    String
  allcontent_id AllContent @relation(fields: [allContentID], references: [id])
  allContentID  String
  createdAt     DateTime?  @default(now()) @db.Timestamp()
  updatedAt     DateTime   @updatedAt
}

model WordsGlossary {
  id                  String                @id @default(uuid())
  name                String
  description         String
  points              Int
  example             String
  org_id              Organization          @relation(fields: [OrganizationId], references: [id])
  OrganizationId      String
  createdAt           DateTime?             @default(now()) @db.Timestamp()
  updatedAt           DateTime              @updatedAt
  LessonWordsGlossary LessonWordsGlossary[]
  Enrollment          Enrollment[]
}
